# Generated by Django 4.2.7 on 2025-07-28 01:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('attendance', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FaceRecognitionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_threshold', models.FloatField(default=0.4, help_text='Umbral de confianza para considerar una coincidencia válida (menor valor = más estricto)')),
                ('max_verification_attempts', models.IntegerField(default=3, help_text='Número máximo de intentos de verificación por sesión')),
                ('face_detection_model', models.CharField(choices=[('hog', 'HOG (CPU)'), ('cnn', 'CNN (GPU)')], default='hog', help_text='Modelo a usar para detección facial', max_length=50)),
                ('enable_logging', models.BooleanField(default=True, help_text='Habilitar logging de verificaciones faciales')),
                ('is_active', models.BooleanField(default=True, help_text='Sistema de reconocimiento facial activo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Configuración de Reconocimiento Facial',
                'verbose_name_plural': 'Configuraciones de Reconocimiento Facial',
            },
        ),
        migrations.CreateModel(
            name='FaceVerificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('success', 'Exitoso'), ('failed', 'Fallido'), ('no_face_detected', 'No se detectó rostro'), ('no_registered_face', 'Sin rostro registrado'), ('error', 'Error del sistema')], default='failed', max_length=20)),
                ('confidence_score', models.FloatField(blank=True, help_text='Puntuación de confianza de la verificación (0-1)', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Dirección IP desde donde se realizó la verificación', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent del navegador/dispositivo', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Mensaje de error si la verificación falló', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(blank=True, help_text='Sesión de asistencia asociada (si aplica)', null=True, on_delete=django.db.models.deletion.CASCADE, to='attendance.attendancesession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='face_verification_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log de Verificación Facial',
                'verbose_name_plural': 'Logs de Verificación Facial',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FaceEncoding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('encoding_data', models.TextField(help_text='Codificación facial almacenada como JSON string')),
                ('profile_image', models.ImageField(blank=True, help_text='Imagen utilizada para generar la codificación facial', null=True, upload_to='face_profiles/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indica si esta codificación facial está activa')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='face_encoding_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Codificación Facial',
                'verbose_name_plural': 'Codificaciones Faciales',
            },
        ),
    ]
