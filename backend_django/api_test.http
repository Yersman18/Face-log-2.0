###
# =======================================================================================
# ARCHIVO DE PRUEBAS DE API PARA FACELOG 2.0 - VERSIÓN COMPLETA
# =======================================================================================
#
# Instrucciones de uso:
# 1. Instala la extensión "REST Client" en Visual Studio Code (de Huachao Mao).
# 2. Abre este archivo (`api_test.http`) en VS Code.
# 3. Modifica los valores en la sección de "Variables Globales" para que coincidan con tu entorno.
# 4. Ejecuta las peticiones en orden haciendo clic en el texto "Send Request" que aparece sobre cada una.
#
# Flujo recomendado:
# - Ejecuta el login de Administrador (petición 2.1).
# - Crea una ficha (3.1) y un instructor (opcional, 2.3).
# - Descomenta y ejecuta el registro de un nuevo aprendiz (4.1).
# - Prueba el resto de flujos.
#
###

# =================================================================
# 1. VARIABLES GLOBALES - ¡¡¡IMPORTANTE: MODIFICA ESTOS VALORES!!!
# =================================================================

# -- Configuración del Servidor --
@host = http://127.0.0.1:8000
@api_prefix = /api/v1

# -- Credenciales de Administrador --
@admin_username = admin
@admin_password = admin

# -- Datos para un nuevo Instructor (opcional) --
@new_instructor_username = instructor_test_01
@new_instructor_password = StrongPassword123!
@new_instructor_email = instructor.test.01@example.com
@new_instructor_id = 10203040

# -- Datos para un nuevo Aprendiz --
@new_student_username = aprendiz_test_01
@new_student_password = StrongPassword123!
@new_student_email = aprendiz.test.01@example.com
@new_student_id = 987654321
# IMPORTANTE: Usa la ruta a una imagen de un rostro. He corregido la extensión a .jpg
@new_student_face_image_path = C:/Users/giova/OneDrive/Imágenes/Camera Roll/rostro.jpg

# -- Datos de Ficha y Sesión (los IDs se llenarán automáticamente) --
@ficha_numero_to_create = 2890001
@ficha_id =
@session_id =
@student_user_id =

# -- Tokens de autenticación (se llenarán automáticamente) --
@admin_token =
@instructor_token =
@student_token =


###
# =================================================================
# 2. AUTENTICACIÓN Y GESTIÓN DE USUARIOS (ADMIN)
# =================================================================

### 2.1 Iniciar Sesión como Administrador
# @name adminLogin
POST {{host}}{{api_prefix}}/auth/token/
Content-Type: application/json

{
    "username": "{{admin_username}}",
    "password": "{{admin_password}}"
}

@admin_token = {{adminLogin.response.body.access}}

### 2.2 Listar todos los usuarios (Admin)
GET {{host}}{{api_prefix}}/auth/users/
Authorization: Bearer {{admin_token}}

### 2.3 Crear un nuevo Instructor (Admin)
# Descomenta las siguientes líneas para ejecutar esta petición.
# POST {{host}}{{api_prefix}}/auth/users/
# Authorization: Bearer {{admin_token}}
# Content-Type: application/json
# 
# {
#     "username": "{{new_instructor_username}}",
#     "password": "{{new_instructor_password}}",
#     "email": "{{new_instructor_email}}",
#     "first_name": "Instructor",
#     "last_name": "De Prueba",
#     "user_type": "instructor",
#     "instructor_id": "{{new_instructor_id}}"
# }


###
# =================================================================
# 3. GESTIÓN DE FICHAS Y SESIONES (ADMIN / INSTRUCTOR)
# =================================================================

### 3.1 Crear una nueva Ficha (Admin)
# @name createFicha
POST {{host}}{{api_prefix}}/attendance/fichas/
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
    "numero": "{{ficha_numero_to_create}}",
    "nombre": "Análisis y Desarrollo de Software",
    "fecha_inicio": "2024-08-01",
    "fecha_fin": "2026-08-01"
}

@ficha_id = {{createFicha.response.body.id}}

### 3.2 Listar todas las Fichas (Admin/Instructor)
GET {{host}}{{api_prefix}}/attendance/fichas/
Authorization: Bearer {{admin_token}}

### 3.3 Iniciar Sesión como Instructor (si lo creaste en 2.3)
# @name instructorLogin
# POST {{host}}{{api_prefix}}/auth/token/
# Content-Type: application/json
# 
# {
#     "username": "{{new_instructor_username}}",
#     "password": "{{new_instructor_password}}"
# }
# 
# @instructor_token = {{instructorLogin.response.body.access}}

### 3.4 Crear una Sesión de Asistencia para una Ficha (Instructor)
# Nota: Debes estar logueado como instructor.
# @name createSession
# POST {{host}}{{api_prefix}}/attendance/sessions/
# Authorization: Bearer {{instructor_token}}
# Content-Type: application/json
# 
# {
#     "ficha": {{ficha_id}},
#     "permisividad": 15
# }
# 
# @session_id = {{createSession.response.body.id}}


###
# =================================================================
# 4. FLUJO DEL APRENDIZ
# =================================================================

### 4.1 Registrar un nuevo Aprendiz (con rostro)
# Asocia al aprendiz a la ficha creada en el paso 3.1.
# @name registerStudent
POST {{host}}{{api_prefix}}/auth/register/student/
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="username"

{{new_student_username}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="password"

{{new_student_password}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="password2"

{{new_student_password}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="first_name"

Aprendiz
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="last_name"

Prueba
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="email"

{{new_student_email}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="student_id"

{{new_student_id}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="ficha_numero"

{{ficha_numero_to_create}}
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="face_image"; filename="{{new_student_face_image_path}}"
Content-Type: image/jpeg

< {{new_student_face_image_path}}
------WebKitFormBoundary7MA4YWxkTrZu0gW--

@student_user_id = {{registerStudent.response.body.user.id}}

### 4.2 Iniciar Sesión como Aprendiz
# @name studentLogin
POST {{host}}{{api_prefix}}/auth/token/
Content-Type: application/json

{
    "username": "{{new_student_username}}",
    "password": "{{new_student_password}}"
}

@student_token = {{studentLogin.response.body.access}}

### 4.3 Ver perfil de usuario (Aprendiz)
GET {{host}}{{api_prefix}}/auth/profile/
Authorization: Bearer {{student_token}}

### 4.4 Reconocimiento Facial (Simulación)
# Esta petición simula el envío de una imagen para tomar asistencia.
# Necesitas una sesión activa (creada en 3.4) para que funcione.
# POST {{host}}{{api_prefix}}/face/recognize/
# Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
# 
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="session_id"
# 
# {{session_id}}
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="image"; filename="{{new_student_face_image_path}}"
# Content-Type: image/jpeg
# 
# < {{new_student_face_image_path}}
# ------WebKitFormBoundary7MA4YWxkTrZu0gW--


###
# =================================================================
# 5. FLUJO DE EXCUSAS (APRENDIZ)
# =================================================================

### 5.1 Listar mis inasistencias
# Para que esto devuelva algo, primero un instructor debe crear una sesión
# y el aprendiz debe estar marcado como ausente.
# @name listAbsences
GET {{host}}{{api_prefix}}/attendance/absences/
Authorization: Bearer {{student_token}}

@absent_session_id = {{listAbsences.response.body.$[0].session_id}}

### 5.2 Crear una excusa para una inasistencia
# Usa el `session_id` de una inasistencia del paso anterior.
# Si no hay inasistencias, esta petición fallará (lo cual es correcto).
# @name createExcuse
# POST {{host}}{{api_prefix}}/excuses/excuses/
# Authorization: Bearer {{student_token}}
# Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
# 
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="session"
# 
# {{absent_session_id}}
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="reason"
# 
# Calamidad doméstica, adjunto prueba.
# ------WebKitFormBoundary7MA4YWxkTrZu0gW
# Content-Disposition: form-data; name="attachment"; filename="prueba.pdf"
# Content-Type: application/pdf
# 
# < C:/path/to/your/proof.pdf
# ------WebKitFormBoundary7MA4YWxkTrZu0gW--

@excuse_id = {{createExcuse.response.body.id}}

### 5.3 Listar mis excusas (Aprendiz)
GET {{host}}{{api_prefix}}/excuses/excuses/
Authorization: Bearer {{student_token}}


###
# =================================================================
# 6. REVISIÓN DE EXCUSAS Y REPORTES (INSTRUCTOR)
# =================================================================

### 6.1 Listar todas las excusas (Instructor)
# GET {{host}}{{api_prefix}}/excuses/excuses/
# Authorization: Bearer {{instructor_token}}

### 6.2 Aprobar o Rechazar una Excusa (Instructor)
# PATCH {{host}}{{api_prefix}}/excuses/excuses/{{excuse_id}}/
# Authorization: Bearer {{instructor_token}}
# Content-Type: application/json
# 
# {
#     "status": "approved" # puede ser "approved" o "rejected"
# }

### 6.3 Ver reporte de asistencia global (Instructor)
# GET {{host}}{{api_prefix}}/attendance/report/global/
# Authorization: Bearer {{instructor_token}}

### 6.4 Descargar reporte de asistencia en PDF (Instructor)
# GET {{host}}{{api_prefix}}/attendance/report/global/pdf/
# Authorization: Bearer {{instructor_token}}


###
# =================================================================
# 7. RECUPERACIÓN DE CONTRASEÑA
# =================================================================

### 7.1 Solicitar reseteo de contraseña
# Proporciona el email de una cuenta existente (p. ej. el aprendiz creado).
# @name requestReset
POST {{host}}{{api_prefix}}/auth/password/reset/
Content-Type: application/json

{
    "email": "{{new_student_email}}"
}

@reset_token = {{requestReset.response.body.token}}

### 7.2 Confirmar nueva contraseña
# Usa el token obtenido en el paso anterior para establecer una nueva contraseña.
# La API debería invalidar el token después de su uso.
POST {{host}}{{api_prefix}}/auth/password/reset/confirm/
Content-Type: application/json

{
    "token": "{{reset_token}}",
    "password": "NewSecurePassword456!",
    "password2": "NewSecurePassword456!"
}